# -*- coding: utf-8 -*-
"""Numpy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KiE4TCVWGije6g1Z5oTdpH8NqJ0qbYO7

# Array Creation Method
"""

import numpy as np
print("✅ NumPy Imported Successfully")
# Array Creation Methods
# From a list
a = np.array([1, 2, 3])
print("1D Array:", a)

# From nested lists (2D)
b = np.array([[1, 2, 3], [4, 5, 6]])
print("2D Array:\n", b)

# Zeros, Ones, Full
z = np.zeros((2, 3))
o = np.ones((2, 3))
f = np.full((2, 3), 7)

print("Zeros:\n", z)
print("Ones:\n", o)
print("Full with 7s:\n", f)

# Identity Matrix
i = np.eye(3)
print("Identity Matrix:\n", i)

# Arange and Linspace
ar = np.arange(0, 10, 2)
ls = np.linspace(0, 1, 5)

print("Arange (0 to 10, step 2):", ar)
print("Linspace (0 to 1, 5 steps):", ls)

# Random Values
r1 = np.random.rand(2, 3)     # Uniform [0,1)
r2 = np.random.randn(2, 3)    # Standard Normal
r3 = np.random.randint(10, 50, (2, 3))  # Integers

print("Random [0,1):\n", r1)
print("Random Normal:\n", r2)
print("Random Integers:\n", r3)

"""#Array Attributes"""

print("Shape:", b.shape)
print("Size:", b.size)
print("Data type:", b.dtype)
print("Dimensions (ndim):", b.ndim)

"""#  Reshape & Flatten

"""

reshaped = np.reshape(b, (3, 2))
flattened = b.flatten()

print("Reshaped (3x2):\n", reshaped)
print("Flattened:\n", flattened)

"""**INDEXING & SLICING**"""

print("Element at (1,2):", b[1, 2])
print("First row:", b[0])
print("First column:", b[:, 0])
print("Last 2 columns:\n", b[:, 1:])

# Boolean indexing
mask = b > 3
print("Boolean Mask:\n", mask)
print("Filtered Elements > 3:", b[mask])

"""**MATH OPERATION**"""

arr = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])

print("Add:", arr + arr2)
print("Subtract:", arr2 - arr)
print("Multiply:", arr * 2)
print("Divide:", arr2 / arr)

print("Exponent:", arr ** 2)
print("Square Root:", np.sqrt(arr2))
print("Sin:", np.sin(arr))

"""**Aggregation **& **Statistics**"""

data = np.array([[1, 2, 3], [4, 5, 6]])

print("Sum:", data.sum())
print("Sum by row (axis=1):", data.sum(axis=1))
print("Mean:", data.mean())
print("Median:", np.median(data))
print("Standard Deviation:", np.std(data))
print("Max value:", data.max())
print("Argmax (index of max):", data.argmax())

""" **Stacking &** **Concatenation**"""

a1 = np.array([[1, 2], [3, 4]])
a2 = np.array([[5, 6], [7, 8]])

# Vertical & Horizontal stacking
vstacked = np.vstack((a1, a2))
hstacked = np.hstack((a1, a2))

print("Vertical Stack:\n", vstacked)
print("Horizontal Stack:\n", hstacked)

# Concatenate
concat = np.concatenate((a1, a2), axis=0)
print("Concatenated along rows:\n", concat)

"""**Sorting & Uniqueness**

"""

x = np.array([7, 2, 1, 4, 2])
print("Sorted:", np.sort(x))
print("Unique values:", np.unique(x))

"""** Broadcasting**"""

b = np.array([[1, 2, 3], [4, 5, 6]])
print("Original:\n", b)

# Add scalar
print("Add 10 to all:\n", b + 10)

# Add row vector
v = np.array([1, 0, 1])
print("Add row-wise:\n", b + v)

"""**MAKING CONDITION AND COPYING ARRAY**"""

print("Only even numbers:\n", b[b % 2 == 0])
print("Replace < 4 with 0:\n", np.where(b < 4, 0, b))

#COPYING ARRAY (VERY IMPORTANT)
x = np.array([1, 2, 3])
y = x.copy()

x[0] = 99
print("Original x:", x)
print("Copied y:", y)  # y won’t change